{"version":3,"sources":["utils.js","index.js"],"names":["getDateFromUnixTimestamp","dt","Date","toLocaleDateString","getMonthOfDate","getMonth","getYearOfDate","getFullYear","gamesInfo","apps","appid","name","ALLNEWS","timestamps","id","value","herokuURL","getNewsForGameUrl","gameId","sortDataByNewest","data","sort","a","b","date","getStartDateOfCurrentWeek","now","start","dayOfWeek","getDay","numDay","getDate","Math","setDate","floor","renderForm","styles","headline","map","gameData","renderGameFilter","join","window","dataStore","checkedGamesIDs","includes","toString","trackGames","target","filter","filterID","currentGameId","renderApp","document","querySelector","innerHTML","App","getResults","isCurrentGameDataLoaded","Boolean","newsByGames","loadData","sourceURL","Promise","resolve","fetch","method","headers","body","JSON","stringify","url","then","response","json","performRetrieve","error","isDataLoading","catch","finally","currentTimestamp","content","length","greeting","timestampsSwitch","renderNewsFeed","setCurrentTimestamp","currentDate","createNewsItem","title","contents","news_item","filterDataByTimestamp","dataByTimestamp","today","newsItem","week","month","alltime","dataNewsContainer","appnews","newsitems","news","forEach","item","news_feed"],"mappings":"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","file":"games-news-feed.879320db.js","sourceRoot":"..","sourcesContent":["export function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\nexport function getMonthOfDate(dt) {\n  return new Date(dt * 1000).getMonth();\n}\n\nexport function getYearOfDate(dt) {\n  return new Date(dt * 1000).getFullYear();\n}\n\nexport const gamesInfo = {\n  apps: [\n    {\n      appid: 730,\n      name: 'Counter-Strike: Global Offensive',\n    },\n    {\n      appid: 1091500,\n      name: 'Cyberpunk 2077',\n    },\n    {\n      appid: 570,\n      name: 'Dota 2',\n    },\n  ],\n};\n\nexport const ALLNEWS = 'alltime';\n\nexport const timestamps = [\n  { id: 'all', value: 'alltime', name: 'All news' },\n  { id: 'today', value: 'today', name: 'Today' },\n  { id: 'week', value: 'week', name: 'This week' },\n  { id: 'month', value: 'month', name: 'This month' },\n];\n\nexport const herokuURL = 'https://not-so-corsy.herokuapp.com/getdata';\n\nexport function getNewsForGameUrl(gameId) {\n  return `http://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=${gameId}&count=20`;\n}\n\nexport function sortDataByNewest(data) {\n  return data.sort((a, b) => (a.date < b.date ? 1 : -1));\n}\n\nexport function getStartDateOfCurrentWeek() {\n  let now = new Date();\n  let start = new Date(now);\n  let dayOfWeek = now.getDay();\n  let numDay = now.getDate() + 1;\n  start.setDate(numDay - dayOfWeek);\n\n  return Math.floor(start / 1000);\n}\n","import {\n  getDateFromUnixTimestamp,\n  gamesInfo,\n  getNewsForGameUrl,\n  herokuURL,\n  sortDataByNewest,\n  ALLNEWS,\n  timestamps,\n  getStartDateOfCurrentWeek,\n  getMonthOfDate,\n  getYearOfDate,\n} from './utils';\nimport styles from './styles.css';\n\nwindow.dataStore = {\n  checkedGamesIDs: [],\n  currentGameId: '',\n  isDataLoading: false,\n  error: null,\n  newsByGames: {},\n  currentTimestamp: ALLNEWS,\n  currentDate: Math.floor(Date.now() / 1000),\n};\n\nwindow.renderApp = renderApp;\nwindow.renderNewsFeed = renderNewsFeed;\nwindow.performRetrieve = performRetrieve;\nwindow.loadData = loadData;\n\nfunction renderForm() {\n  return `\n  <form id=\"games\" onchange=\"window.trackGames(event); window.performRetrieve()\">\n  <fieldset class=\"allowed_games\">\n        <legend class=\"${styles.headline}\">Select games to track news</legend>\n        ${gamesInfo.apps.map(gameData => renderGameFilter(gameData)).join('')}\n    </fieldset>\n  </form>\n  `;\n}\n\nfunction renderGameFilter({ appid, name }) {\n  return `<label for=\"${appid}\">\n  <input\n    type=\"checkbox\"\n    id=\"${appid}\"\n    class=\"main__checkbox\"\n    name=\"${name}\"\n    value=\"${appid}\"\n    ${window.dataStore.checkedGamesIDs.includes(appid.toString()) ? 'checked' : ''} \n  />\n  <span class=\"game_name\">${name}</span>\n</label>`;\n}\nwindow.trackGames = trackGames;\n\nfunction trackGames({ target }) {\n  const id = target.id;\n  if (window.dataStore.checkedGamesIDs.includes(id)) {\n    window.dataStore.checkedGamesIDs = window.dataStore.checkedGamesIDs.filter(\n      filterID => filterID !== id,\n    );\n  } else {\n    window.dataStore.checkedGamesIDs = [...window.dataStore.checkedGamesIDs, id];\n    window.dataStore.currentGameId = id;\n  }\n  window.renderApp();\n}\n\nrenderApp();\n\nfunction renderApp() {\n  document.querySelector('#app-root').innerHTML = `${App()}`;\n}\n\nfunction App() {\n  return `<div>\n  ${renderForm()}\n  ${getResults()}\n  </div> `;\n}\n\nfunction isCurrentGameDataLoaded() {\n  return Boolean(window.dataStore.newsByGames[window.dataStore.currentGameId]);\n}\n\nfunction loadData() {\n  const sourceURL = getNewsForGameUrl(window.dataStore.currentGameId);\n\n  if (!isCurrentGameDataLoaded()) {\n    return fetch(herokuURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url: sourceURL }),\n    })\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  return Promise.resolve({});\n}\n\nfunction performRetrieve() {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.newsByGames[window.dataStore.currentGameId] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(window.renderApp);\n}\n\nfunction getResults() {\n  const { checkedGamesIDs, isDataLoading, error, currentTimestamp } = window.dataStore;\n  let content = '';\n\n  if (checkedGamesIDs.length == 0) {\n    content = `<p class=\"${styles.greeting}\">\n    Welcome to your personal game news aggregator!</p>`;\n  } else {\n    if (isDataLoading) {\n      content = `<p>Loading...</p>`;\n    }\n    if (error !== null) {\n      content = error;\n    }\n  }\n\n  if (isCurrentGameDataLoaded()) {\n    content = `\n        ${timestampsSwitch(currentTimestamp)}\n        ${renderNewsFeed()}\n      `;\n  }\n\n  return content;\n}\n\nfunction timestampsSwitch(currentTimestamp) {\n  return `\n  <fieldset>\n  <legend>Timestamps</legend>\n${timestamps\n  .map(\n    ({ id, value, name }) =>\n      `\n        <input \n            type=\"radio\" \n            id=\"${id}\"\n            name=\"temperature-units\" \n            value=\"${value}\" \n            ${currentTimestamp === value ? ' checked ' : ''}\n            onchange=\"(${setCurrentTimestamp})(this.value);\"  \n        >\n          <label for=\"${id}\">${name}</label>\n      `,\n  )\n  .join('')}\n </fieldset>`;\n}\n\nconst setCurrentTimestamp = function (value) {\n  window.dataStore.currentTimestamp = value;\n  window.renderApp();\n};\n\nfunction createNewsItem({ date, title, contents }) {\n  return `\n  <div class=\"${styles.news_item}\">\n    <h3 class=\"title\">${title}</h3>\n    <div>${getDateFromUnixTimestamp(date)}</div>\n    <p class=\"content\">${contents}</p>\n  </div>`;\n}\n\nfunction filterDataByTimestamp(data, currentDate, currentTimestamp) {\n  const dataByTimestamp = {\n    today: () => {\n      return data.filter(\n        newsItem =>\n          getDateFromUnixTimestamp(newsItem.date) == getDateFromUnixTimestamp(currentDate),\n      );\n    },\n    week: () => {\n      return data.filter(newsItem => newsItem.date > getStartDateOfCurrentWeek());\n    },\n    month: () => {\n      return data.filter(\n        newsItem =>\n          getYearOfDate(newsItem.date) == getYearOfDate(currentDate) &&\n          getMonthOfDate(newsItem.date) == getMonthOfDate(currentDate),\n      );\n    },\n    alltime: () => {\n      return data;\n    },\n  };\n  return dataByTimestamp[currentTimestamp]();\n}\n\nfunction renderNewsFeed() {\n  let dataNewsContainer = [];\n\n  window.dataStore.checkedGamesIDs.map(appid => {\n    dataNewsContainer = [\n      ...dataNewsContainer,\n      ...window.dataStore.newsByGames[appid].appnews.newsitems,\n    ];\n  });\n  const news = filterDataByTimestamp(\n    dataNewsContainer,\n    window.dataStore.currentDate,\n    window.dataStore.currentTimestamp,\n  );\n  let content = '';\n  sortDataByNewest(news).forEach(item => {\n    content += createNewsItem(item);\n  });\n  return `\n  <div class=\"${styles.news_feed}\"> ${content} </div>\n  `;\n}\n"]}