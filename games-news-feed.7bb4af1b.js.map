{"version":3,"sources":["utils.js","index.js"],"names":["getDateFromUnixTimestamp","dt","Date","toLocaleDateString","getMonthOfDate","getMonth","getYearOfDate","getFullYear","currentDate","Math","floor","now","gamesInfo","apps","appid","name","ALLNEWS","timestamps","id","value","herokuURL","getNewsForGameUrl","gameId","sortDataByNewest","data","sort","a","b","date","getStartDate","start","dayOfWeek","getDay","numDay","getDate","setDate","renderForm","styles","headline","map","gameData","renderGameFilter","join","window","dataStore","checkedGamesIDs","includes","toString","trackGames","target","filter","filterID","currentGameId","renderApp","document","querySelector","innerHTML","App","getResults","isCurrentGameDataLoaded","Boolean","newsByGames","loadData","sourceURL","Promise","resolve","fetch","method","headers","body","JSON","stringify","url","then","response","json","performRetrieve","error","isDataLoading","catch","finally","currentTimestamp","content","length","greeting","renderTimestamps","renderSearch","renderNewsFeed","keyword","clearInput","searchByKeyword","setCurrentTimestamp","tag","filteredNews","createNewsItem","title","contents","feedlabel","news_item","setTag","filterDataByTimestamp","dataByTimestamp","today","newsItem","week","month","alltime","dataNewsContainer","appnews","newsitems","el","forEach","news_feed"],"mappings":"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","file":"games-news-feed.7bb4af1b.js","sourceRoot":"..","sourcesContent":["export function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\nexport function getMonthOfDate(dt) {\n  return new Date(dt * 1000).getMonth();\n}\n\nexport function getYearOfDate(dt) {\n  return new Date(dt * 1000).getFullYear();\n}\n\nexport const currentDate = Math.floor(Date.now() / 1000);\n\nexport const gamesInfo = {\n  apps: [\n    {\n      appid: 730,\n      name: 'Counter-Strike: Global Offensive',\n    },\n    {\n      appid: 1091500,\n      name: 'Cyberpunk 2077',\n    },\n    {\n      appid: 570,\n      name: 'Dota 2',\n    },\n    {\n      appid: 578080,\n      name: 'PUBG',\n    },\n    {\n      appid: 440,\n      name: 'TF2',\n    },\n  ],\n};\n\nexport const ALLNEWS = 'alltime';\n\nexport const timestamps = [\n  { id: 'all', value: 'alltime', name: 'All news' },\n  { id: 'today', value: 'today', name: 'Today' },\n  { id: 'week', value: 'week', name: 'For last 7 days' },\n  { id: 'month', value: 'month', name: 'This month' },\n];\n\nexport const herokuURL = 'https://not-so-corsy.herokuapp.com/getdata';\n\nexport function getNewsForGameUrl(gameId) {\n  return `http://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=${gameId}&count=20`;\n}\n\nexport function sortDataByNewest(data) {\n  return data.sort((a, b) => (a.date < b.date ? 1 : -1));\n}\n\nexport function getStartDate() {\n  let now = new Date();\n  let start = new Date(now);\n  let dayOfWeek = now.getDay();\n  let numDay = now.getDate() + 1;\n  start.setDate(numDay - dayOfWeek - 6);\n\n  return Math.floor(start / 1000);\n}\n","import {\n  getDateFromUnixTimestamp,\n  gamesInfo,\n  getNewsForGameUrl,\n  herokuURL,\n  sortDataByNewest,\n  ALLNEWS,\n  timestamps,\n  getStartDate,\n  getMonthOfDate,\n  getYearOfDate,\n  currentDate,\n} from './utils';\nimport styles from './styles.css';\n\nwindow.dataStore = {\n  checkedGamesIDs: [],\n  currentGameId: '',\n  isDataLoading: false,\n  error: null,\n  newsByGames: {},\n  currentTimestamp: ALLNEWS,\n  tag: null,\n  filteredNews: null,\n  keyword: '',\n};\n\nwindow.renderApp = renderApp;\nwindow.renderNewsFeed = renderNewsFeed;\nwindow.performRetrieve = performRetrieve;\nwindow.loadData = loadData;\nwindow.clearInput = clearInput;\nwindow.searchByKeyword = searchByKeyword;\n\nfunction renderForm() {\n  return `\n  <form id=\"games\" onchange=\"window.trackGames(event); window.performRetrieve()\">\n  <fieldset class=\"allowed_games\">\n        <legend class=\"${styles.headline}\">Select games to track news</legend>\n        ${gamesInfo.apps.map(gameData => renderGameFilter(gameData)).join('')}\n    </fieldset>\n  </form>\n  `;\n}\n\nfunction renderGameFilter({ appid, name }) {\n  return `<label for=\"${appid}\">\n  <input\n    type=\"checkbox\"\n    id=\"${appid}\"\n    class=\"main__checkbox\"\n    name=\"${name}\"\n    value=\"${appid}\"\n    ${window.dataStore.checkedGamesIDs.includes(appid.toString()) ? 'checked' : ''} \n  />\n  <span class=\"game_name\">${name}</span>\n</label>`;\n}\nwindow.trackGames = trackGames;\n\nfunction trackGames({ target }) {\n  const id = target.id;\n  if (window.dataStore.checkedGamesIDs.includes(id)) {\n    window.dataStore.checkedGamesIDs = window.dataStore.checkedGamesIDs.filter(\n      filterID => filterID !== id,\n    );\n  } else {\n    window.dataStore.checkedGamesIDs = [...window.dataStore.checkedGamesIDs, id];\n    window.dataStore.currentGameId = id;\n  }\n  window.renderApp();\n}\n\nrenderApp();\n\nfunction renderApp() {\n  document.querySelector('#app-root').innerHTML = `${App()}`;\n}\n\nfunction App() {\n  return `<div>\n  ${renderForm()}\n  ${getResults()}\n  </div> `;\n}\n\nfunction isCurrentGameDataLoaded() {\n  return Boolean(window.dataStore.newsByGames[window.dataStore.currentGameId]);\n}\n\nfunction loadData() {\n  const sourceURL = getNewsForGameUrl(window.dataStore.currentGameId);\n\n  if (!isCurrentGameDataLoaded()) {\n    return fetch(herokuURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url: sourceURL }),\n    })\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  return Promise.resolve({});\n}\n\nfunction performRetrieve() {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.newsByGames[window.dataStore.currentGameId] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(window.renderApp);\n}\n\nfunction getResults() {\n  const { checkedGamesIDs, isDataLoading, error, currentTimestamp } = window.dataStore;\n  let content = '';\n\n  if (checkedGamesIDs.length == 0) {\n    content = `<p class=\"${styles.greeting}\">\n    Welcome to your personal game news aggregator!</p>`;\n  } else {\n    if (isDataLoading) {\n      content = `<p>Loading...</p>`;\n    }\n    if (error !== null) {\n      content = error;\n    }\n  }\n\n  if (isCurrentGameDataLoaded() && checkedGamesIDs.length !== 0) {\n    content = `\n        ${renderTimestamps(currentTimestamp)}\n        ${renderSearch()}\n        ${renderNewsFeed()}\n      `;\n  }\n\n  return content;\n}\n\nfunction renderSearch() {\n  return `\n  <div>\n  <p>Input KEYWORD and press enter</p>\n  <input\n      type=\"text\"\n      value=\"${window.dataStore.keyword}\"\n      onchange=\"window.searchByKeyword(this.value);\" \n  />\n  <button \n    type=\"button\"\n    onclick=\"window.clearInput()\"\n    >Clear</button>\n  </div>\n`;\n}\n\nfunction clearInput() {\n  window.dataStore.keyword = '';\n  window.renderApp();\n}\n\nfunction searchByKeyword(value) {\n  window.dataStore.keyword = value;\n  window.renderApp();\n}\n\nfunction renderTimestamps(currentTimestamp) {\n  return `\n  <div>\n  <legend>Timestamps</legend>\n  <select id=\"selectTimestamp\" onchange=\"(${setCurrentTimestamp})(this.value);\">\n${timestamps\n  .map(\n    ({ id, value, name }) =>\n      `\n      <option  \n          id=\"${id}\" \n          name=\"timestamp-option\"\n          value=\"${value}\"\n          ${currentTimestamp === value ? ' selected ' : ''}\n          >${name}</option>\n \n  `,\n  )\n  .join('')}\n  </select>\n  </div>\n  `;\n}\n\nconst setCurrentTimestamp = function (value) {\n  window.dataStore.currentTimestamp = value;\n  window.renderApp();\n};\n\nfunction createNewsItem({ date, title, contents, feedlabel }) {\n  return `\n  <div class=\"${styles.news_item}\">\n    <h3 class=\"title\">${title}</h3>\n    <div>${feedlabel}</div>\n    <div>${getDateFromUnixTimestamp(date)}</div>\n    <p class=\"content\">${contents}</p>\n    <div> All news with tag\n      <label for=\"${feedlabel}\">\n        <input\n          type=\"checkbox\"\n          id=\"${feedlabel}\"\n          class=\"main__checkbox\"\n          name=\"tag\"\n          value=\"${feedlabel}\"\n          ${window.dataStore.tag == feedlabel ? 'checked' : null}\n          onchange=\"(${setTag})(this.value);\"\n        />\n        <span class=\"game_name\">${feedlabel}</span>\n      </label>\n    </div>\n  </div>`;\n}\n\nfunction setTag(value) {\n  if (window.dataStore.tag !== null) {\n    window.dataStore.tag = null;\n  } else {\n    window.dataStore.tag = value;\n  }\n\n  window.renderApp();\n}\n\nfunction filterDataByTimestamp(data, currentDate, currentTimestamp) {\n  const dataByTimestamp = {\n    today: () => {\n      return data.filter(\n        newsItem =>\n          getDateFromUnixTimestamp(newsItem.date) == getDateFromUnixTimestamp(currentDate),\n      );\n    },\n    week: () => {\n      return data.filter(newsItem => newsItem.date > getStartDate());\n    },\n    month: () => {\n      return data.filter(\n        newsItem =>\n          getYearOfDate(newsItem.date) == getYearOfDate(currentDate) &&\n          getMonthOfDate(newsItem.date) == getMonthOfDate(currentDate),\n      );\n    },\n    alltime: () => {\n      return data;\n    },\n  };\n  return dataByTimestamp[currentTimestamp]();\n}\n\nfunction renderNewsFeed() {\n  const { checkedGamesIDs, newsByGames, tag, currentTimestamp, keyword } = window.dataStore;\n  let dataNewsContainer = [];\n\n  checkedGamesIDs.map(appid => {\n    dataNewsContainer = [...dataNewsContainer, ...newsByGames[appid].appnews.newsitems];\n  });\n\n  window.dataStore.filteredNews = filterDataByTimestamp(\n    dataNewsContainer,\n    currentDate,\n    currentTimestamp,\n  );\n\n  if (keyword !== '') {\n    window.dataStore.filteredNews = dataNewsContainer.filter(el => el.title.includes(keyword));\n  }\n\n  if (tag != null) {\n    window.dataStore.filteredNews = dataNewsContainer.filter(\n      el => el.feedlabel == window.dataStore.tag,\n    );\n  }\n\n  let content = '';\n  sortDataByNewest(window.dataStore.filteredNews).forEach(newsItem => {\n    content += createNewsItem(newsItem);\n  });\n  return `\n  <div class=\"${styles.news_feed}\"> ${content} </div>\n  `;\n}\n"]}