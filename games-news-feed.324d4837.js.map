{"version":3,"sources":["utils.js","index.js"],"names":["getDateFromUnixTimestamp","dt","Date","toLocaleDateString","gamesInfo","apps","appid","name","herokuURL","getNewsForGameUrl","gameId","renderForm","map","gameData","renderGameFilter","join","window","dataStore","checkedGamesIDs","includes","toString","trackGames","target","id","filter","filterID","currentGameId","renderApp","document","querySelector","innerHTML","App","getResults","renderNews","isCurrentGameDataLoaded","Boolean","newsByGames","loadData","sourceURL","Promise","resolve","fetch","method","headers","body","JSON","stringify","url","then","response","json","data","performRetrieve","error","isDataLoading","catch","finally","content","styles","news_feed","renderNewsFeed","length","createNewsItem","date","title","contents","news_item","dataNews","appnews","newsitems","sort","a","b","forEach","item"],"mappings":"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","file":"games-news-feed.324d4837.js","sourceRoot":"..","sourcesContent":["export function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\n\nexport const gamesInfo = {\n  apps: [\n    {\n      appid: 730,\n      name: 'Counter-Strike: Global Offensive',\n    },\n    {\n      appid: 1091500,\n      name: 'Cyberpunk 2077',\n    },\n    {\n      appid: 570,\n      name: 'Dota 2',\n    },\n  ],\n};\n\nexport const herokuURL = 'https://not-so-corsy.herokuapp.com/getdata';\n\nexport function getNewsForGameUrl(gameId) {\n  return `http://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=${gameId}&count=10`;\n}\n","import { getDateFromUnixTimestamp, gamesInfo, getNewsForGameUrl, herokuURL } from './utils';\nimport styles from './styles.css';\n\nwindow.dataStore = {\n  checkedGamesIDs: [],\n  currentGameId: '',\n  isDataLoading: false,\n  error: null,\n  newsByGames: {},\n};\n\nwindow.renderApp = renderApp;\nwindow.renderNewsFeed = renderNewsFeed;\nwindow.performRetrieve = performRetrieve;\nwindow.loadData = loadData;\nwindow.renderNews = renderNews;\n\nfunction renderForm() {\n  return `\n  <form id=\"games\" onchange=\"window.trackGames(event); window.performRetrieve()\">\n  <fieldset class=\"allowed_games\">\n        <legend class=\"headline\">Select games to track news</legend>\n        ${gamesInfo.apps.map(gameData => renderGameFilter(gameData)).join('')}\n    </fieldset>\n  </form>\n  `;\n}\n\nfunction renderGameFilter({ appid, name }) {\n  return `<label for=\"${appid}\">\n  <input\n    type=\"checkbox\"\n    id=\"${appid}\"\n    class=\"main__checkbox\"\n    name=\"${name}\"\n    value=\"${appid}\"\n    ${window.dataStore.checkedGamesIDs.includes(appid.toString()) ? 'checked' : ''} \n  />\n  <span class=\"game_name\">${name}</span>\n</label>`;\n}\nwindow.trackGames = trackGames;\n\nfunction trackGames({ target }) {\n  const id = target.id;\n  if (window.dataStore.checkedGamesIDs.includes(id)) {\n    window.dataStore.checkedGamesIDs = window.dataStore.checkedGamesIDs.filter(\n      filterID => filterID !== id,\n    );\n  } else {\n    window.dataStore.checkedGamesIDs = [...window.dataStore.checkedGamesIDs, id];\n    window.dataStore.currentGameId = id;\n  }\n  window.renderApp();\n}\n\nrenderApp();\n\nfunction renderApp() {\n  document.querySelector('#app-root').innerHTML = `${App()}`;\n}\n\nfunction App() {\n  return `<div>\n  ${renderForm()}\n  ${getResults()}\n  </div> `;\n}\n\nfunction renderNews() {\n  document.querySelector('#feed').innerHTML = getResults();\n}\n\nfunction isCurrentGameDataLoaded() {\n  return Boolean(window.dataStore.newsByGames[window.dataStore.currentGameId]);\n}\n\nfunction loadData() {\n  const sourceURL = getNewsForGameUrl(window.dataStore.currentGameId);\n\n  if (!isCurrentGameDataLoaded()) {\n    return fetch(herokuURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url: sourceURL }),\n    })\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  return Promise.resolve({});\n}\n\nfunction performRetrieve() {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.newsByGames[window.dataStore.currentGameId] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(() => {\n      window.renderApp();\n    });\n}\n\nfunction getResults() {\n  const { checkedGamesIDs, isDataLoading, error } = window.dataStore;\n  let content = '';\n\n  if (isCurrentGameDataLoaded()) {\n    content = `\n    <div class=\"${styles.news_feed}\">${renderNewsFeed()}</div>\n    `;\n  }\n\n  if (checkedGamesIDs.length == 0) {\n    content = `<p>Select games to retrieve news for</p>`;\n  } else {\n    if (isDataLoading) {\n      content = `<p>Loading...</p>`;\n    }\n    if (error !== null) {\n      content = error;\n    }\n  }\n\n  return content;\n}\n\nfunction createNewsItem({ date, title, contents }) {\n  return `\n  <div class=\"${styles.news_item}\">\n    <h3 class=\"title\">${title}</h3>\n    <div>${getDateFromUnixTimestamp(date)}</div>\n    <p class=\"content\">${contents}</p>\n  </div>`;\n}\nfunction renderNewsFeed() {\n  let dataNews = [];\n\n  window.dataStore.checkedGamesIDs.map(appid => {\n    dataNews = [...dataNews, ...window.dataStore.newsByGames[appid].appnews.newsitems];\n  });\n  dataNews.sort((a, b) => (a.date < b.date ? 1 : -1));\n  let content = '';\n  dataNews.forEach(item => {\n    content += createNewsItem(item);\n  });\n  return content;\n}\n"]}