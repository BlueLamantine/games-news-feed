{"version":3,"sources":["utils.js","index.js"],"names":["getDateFromUnixTimestamp","dt","Date","toLocaleDateString","gamesInfo","apps","appid","name","getNewsForGameUrl","gameId","renderApp","document","querySelector","innerHTML","renderForm","renderNews","getResults","map","join","isCurrentGameDataLoaded","Boolean","window","dataStore","newsByGames","currentGameId","loadData","url","Promise","resolve","fetch","then","response","json","data","performRetrieve","currentGame","value","error","isDataLoading","catch","finally","content","renderNewsFeed","createNewsItem","item","date","title","contents","dataNews","Object","keys","selectedGames","appnews","newsitems","sort","a","b","forEach","trackGames","addEventListener","target","type","checked"],"mappings":"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","file":"games-news-feed.37a2c1cb.js","sourceRoot":"..","sourcesContent":["export function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\n\nexport const gamesInfo = {\n  apps: [\n    {\n      appid: 730,\n      name: 'Counter-Strike: Global Offensive',\n    },\n    {\n      appid: 1091500,\n      name: 'Cyberpunk 2077',\n    },\n    {\n      appid: 570,\n      name: 'Dota 2',\n    },\n  ],\n};\n\nexport function getNewsForGameUrl(gameId) {\n  return `http://cors-anywhere.herokuapp.com/api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=${gameId}&count=3`;\n}\n","import { getDateFromUnixTimestamp, gamesInfo, getNewsForGameUrl } from './utils';\n\nwindow.dataStore = {\n  currentGameId: null,\n  selectedGames: {},\n  isDataLoading: false,\n  error: null,\n  newsByGames: {},\n};\n\nwindow.renderNewsFeed = renderNewsFeed;\nwindow.performRetrieve = performRetrieve;\nwindow.loadData = loadData;\nwindow.renderNews = renderNews;\n\nrenderApp();\n\nfunction renderApp() {\n  document.querySelector('#app-root').innerHTML = `\n        <form id=\"games\">${renderForm()}</form>\n        <div id=\"feed\"></div>\n    `;\n  renderNews();\n}\n\nfunction renderNews() {\n  document.querySelector('#feed').innerHTML = getResults();\n}\n\nfunction renderForm() {\n  return ` \n        <fieldset>\n        <legend class=\"headline\">Select games to track news</legend>\n        ${gamesInfo.apps\n          .map(\n            ({ appid, name }) =>\n              `<label for=\"${appid}\">\n                <input\n                  type=\"checkbox\"\n                  id=\"${appid}\"\n                  class=\"main__checkbox\"\n                  name=\"${name}\"\n                  value=\"${appid}\"\n                  aria-label=\"csgo\"\n                />\n                <span class=\"gaem__item\">${name}</span>\n              </label>`,\n          )\n          .join('')}\n        </fieldset>\n        `;\n}\n\nfunction isCurrentGameDataLoaded() {\n  return Boolean(window.dataStore.newsByGames[window.dataStore.currentGameId]);\n}\n\nfunction loadData() {\n  const url = getNewsForGameUrl(window.dataStore.currentGameId);\n\n  if (!isCurrentGameDataLoaded(window.dataStore.currentGameId)) {\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  return Promise.resolve({});\n}\n\nfunction performRetrieve(currentGame) {\n  window.dataStore.currentGameId = currentGame.value;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.newsByGames[currentGame.value] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(() => {\n      window.renderNews();\n    });\n}\n\nfunction getResults() {\n  const { currentGameId, isDataLoading, error } = window.dataStore;\n  let content = '';\n  if (currentGameId == null) {\n    content = `<p>Select games to retrieve news for</p>`;\n  } else {\n    if (isDataLoading) {\n      content = `<p>Loading...</p>`;\n    }\n    if (error !== null) {\n      content = error;\n    }\n  }\n  if (isCurrentGameDataLoaded()) {\n    content = renderNewsFeed();\n  }\n  return content;\n}\n\nfunction createNewsItem(item) {\n  const { date, title, contents } = item;\n  return `\n  <div>\n    <h3 class=\"title\">${title}</h3>\n    <div>${getDateFromUnixTimestamp(date)}</div>\n    <p class=\"content\">${contents}</p>\n  </div>`;\n}\nfunction renderNewsFeed() {\n  let dataNews = [];\n\n  Object.keys(window.dataStore.selectedGames).map(appid => {\n    dataNews = [...dataNews, ...window.dataStore.newsByGames[appid].appnews.newsitems];\n  });\n  dataNews.sort((a, b) => (a.date < b.date ? 1 : -1));\n  let content = '';\n  dataNews.forEach(item => {\n    content += createNewsItem(item);\n  });\n  return content;\n}\n\ntrackGames();\n\nfunction trackGames() {\n  document.querySelector('#games').addEventListener('change', ({ target }) => {\n    if (target.type === 'checkbox') {\n      if (target.checked === true) {\n        window.dataStore.selectedGames[target.value] = target.name;\n        performRetrieve(target);\n      } else {\n        delete window.dataStore.selectedGames[target.value];\n        window.renderNews();\n      }\n    }\n  });\n}\n"]}