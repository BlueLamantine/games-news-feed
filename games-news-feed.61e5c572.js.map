{"version":3,"sources":["utils.js","index.js"],"names":["getDateFromUnixTimestamp","dt","Date","toLocaleDateString","gamesInfo","apps","appid","name","herokuURL","getNewsForGameUrl","gameId","renderApp","document","querySelector","innerHTML","renderForm","styles","news_feed","renderNews","getResults","map","join","isCurrentGameDataLoaded","Boolean","window","dataStore","newsByGames","currentGameId","loadData","sourceURL","Promise","resolve","fetch","method","headers","body","JSON","stringify","url","then","response","json","data","performRetrieve","currentGame","value","error","isDataLoading","catch","finally","content","renderNewsFeed","createNewsItem","date","title","contents","news_item","dataNews","Object","keys","selectedGames","appnews","newsitems","sort","a","b","forEach","item","trackGames","addEventListener","target","type","checked"],"mappings":"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","file":"games-news-feed.61e5c572.js","sourceRoot":"..","sourcesContent":["export function getDateFromUnixTimestamp(dt) {\n  return new Date(dt * 1000).toLocaleDateString();\n}\n\nexport const gamesInfo = {\n  apps: [\n    {\n      appid: 730,\n      name: 'Counter-Strike: Global Offensive',\n    },\n    {\n      appid: 1091500,\n      name: 'Cyberpunk 2077',\n    },\n    {\n      appid: 570,\n      name: 'Dota 2',\n    },\n  ],\n};\n\nexport const herokuURL = 'https://not-so-corsy.herokuapp.com/getdata';\n\nexport function getNewsForGameUrl(gameId) {\n  return `http://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/?appid=${gameId}&count=10`;\n}\n","import { getDateFromUnixTimestamp, gamesInfo, getNewsForGameUrl, herokuURL } from './utils';\nimport styles from './styles.css';\n\nwindow.dataStore = {\n  currentGameId: null,\n  selectedGames: {},\n  isDataLoading: false,\n  error: null,\n  newsByGames: {},\n};\n\nwindow.renderNewsFeed = renderNewsFeed;\nwindow.performRetrieve = performRetrieve;\nwindow.loadData = loadData;\nwindow.renderNews = renderNews;\n\nrenderApp();\n\nfunction renderApp() {\n  document.querySelector('#app-root').innerHTML = `\n        <form id=\"games\">${renderForm()}</form>\n        <div id=\"feed\" class=\"${styles.news_feed}\"></div>\n    `;\n  renderNews();\n}\n\nfunction renderNews() {\n  document.querySelector('#feed').innerHTML = getResults();\n}\n\nfunction renderForm() {\n  return ` \n        <fieldset>\n        <legend class=\"headline\">Select games to track news</legend>\n        ${gamesInfo.apps\n          .map(\n            ({ appid, name }) =>\n              `<label for=\"${appid}\">\n                <input\n                  type=\"checkbox\"\n                  id=\"${appid}\"\n                  class=\"main__checkbox\"\n                  name=\"${name}\"\n                  value=\"${appid}\"\n                  aria-label=\"csgo\"\n                />\n                <span class=\"gaem__item\">${name}</span>\n              </label>`,\n          )\n          .join('')}\n        </fieldset>\n        `;\n}\n\nfunction isCurrentGameDataLoaded() {\n  return Boolean(window.dataStore.newsByGames[window.dataStore.currentGameId]);\n}\n\nfunction loadData() {\n  const sourceURL = getNewsForGameUrl(window.dataStore.currentGameId);\n\n  if (!isCurrentGameDataLoaded(window.dataStore.currentGameId)) {\n    return fetch(herokuURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url: sourceURL }),\n    })\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n\n  return Promise.resolve({});\n}\n\nfunction performRetrieve(currentGame) {\n  window.dataStore.currentGameId = currentGame.value;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.newsByGames[currentGame.value] = data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(() => {\n      window.renderNews();\n    });\n}\n\nfunction getResults() {\n  const { currentGameId, isDataLoading, error } = window.dataStore;\n  let content = '';\n  if (currentGameId == null) {\n    content = `<p>Select games to retrieve news for</p>`;\n  } else {\n    if (isDataLoading) {\n      content = `<p>Loading...</p>`;\n    }\n    if (error !== null) {\n      content = error;\n    }\n  }\n  if (isCurrentGameDataLoaded()) {\n    content = renderNewsFeed();\n  }\n  return content;\n}\n\nfunction createNewsItem({ date, title, contents }) {\n  return `\n  <div class=\"${styles.news_item}\">\n    <h3 class=\"title\">${title}</h3>\n    <div>${getDateFromUnixTimestamp(date)}</div>\n    <p class=\"content\">${contents}</p>\n  </div>`;\n}\nfunction renderNewsFeed() {\n  let dataNews = [];\n\n  Object.keys(window.dataStore.selectedGames).map(appid => {\n    dataNews = [...dataNews, ...window.dataStore.newsByGames[appid].appnews.newsitems];\n  });\n  dataNews.sort((a, b) => (a.date < b.date ? 1 : -1));\n  let content = '';\n  dataNews.forEach(item => {\n    content += createNewsItem(item);\n  });\n  return content;\n}\n\ntrackGames();\n\nfunction trackGames() {\n  document.querySelector('#games').addEventListener('change', ({ target }) => {\n    if (target.type === 'checkbox') {\n      if (target.checked === true) {\n        window.dataStore.selectedGames[target.value] = target.name;\n        performRetrieve(target);\n      } else {\n        delete window.dataStore.selectedGames[target.value];\n        window.renderNews();\n      }\n    }\n  });\n}\n"]}